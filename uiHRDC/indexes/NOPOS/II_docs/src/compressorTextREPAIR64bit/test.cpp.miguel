/* test.cpp
 * Copyright (C) 2010, Rodrigo Canovas & Miguel A. Martinez-Prieto
 * all rights reserved.
 *
 * Test
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 *
 *
 * Contacting the author:
 *   Miguel A Martinez-Prieto:  migumar2@infor.uva.es
 */

#include <fstream> 
#include <iostream>
#include <cstdio>
#include <sys/stat.h>
#include <sys/time.h>

//#include "RePairDocCompressor.h"
#include "interfazTextCompressorDocs.h"

#define SEC_TIME_DIVIDER  ((double) 1.0	)	 //1 sec = 1 sec
#define SEC_TIME_UNIT 	  "sec"

using namespace std;
				
int 
main(int argc, char* argv[])
{
	if (argc == 4)
	{			
		struct stat stext;
		struct stat slengths;
		
		if ((stat(argv[1],&stext) == 0) && (stat(argv[2],&slengths) == 0))
		{
			unsigned int length = stext.st_size;
			unsigned int numdocs = ((slengths.st_size)/sizeof(unsigned int))-1;
			
			FILE * ftext = fopen (argv[1],"r");
			FILE * fbegs = fopen (argv[2],"r");
			
			unsigned char *text = (unsigned char*)malloc(length*sizeof(unsigned char));
			unsigned int *docBeginnings = (unsigned int*)malloc((numdocs+2)*sizeof(unsigned int));
			
			unsigned int read = fread (text, sizeof(char), length, ftext);
			if (read != length) { cout << "Error in text reading" << endl; return 0; }
			
			read = fread (docBeginnings, sizeof(int), numdocs+1, fbegs);
			if (read != (numdocs+1)) { cout << "Error in docBeginnins reading" << endl; return 0; }
			
			void * representation;
			build_representation(text, length, docBeginnings, numdocs, NULL, &representation);
			free(text); free(docBeginnings); fclose(ftext); fclose(fbegs);	
			save_representation(representation, argv[3]);
			free_representation(representation);
			
			load_representation(&representation, argv[3]);
			
			unsigned char *doc;
			unsigned int len;
			
			for (uint i=0; i<((RePairDocCompressor*)representation)->numdocs; i++)
			{
				extract_doc_representation (representation, i, &doc, &len);
				cout << doc;
				free(doc);
			}
			
			free_representation(representation);
			
			
			/*
			RePairDocCompressor *compressor = new RePairDocCompressor();
			compressor->build_representation(text, length, docBeginnings, numdocs, NULL, NULL);
			
			
			compressor->save_representation(NULL, argv[3]);
			delete compressor;
			*/
			
			/*
			RePairDocCompressor *compressor;
			RePairDocCompressor::load_representation(argv[3], (void**)(&compressor));
			compressor->decompress();
			delete compressor;
			*/
		}
	}
	else
	{
		// Bad number of parameters
		cout << endl << "   <ERROR> Wrong number of parameters: check your syntax..." << endl;
		cout << "   ./Test <textFile> <docLengthsFile> <outputFile>" << endl;
	}
}
