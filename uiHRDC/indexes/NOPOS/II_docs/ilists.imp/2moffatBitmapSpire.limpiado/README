Introduction
============
   This file contains an implementation of the interface for compression
   of inverted list, based on:
   [Brisaboa et al.  Spire 2008], following the ideas in
   [Moffat & Culpeeper, Spire 2007].

   The idea is two represent  posting lists in a two-levels structure:
   - The first level keeps absolute samples of the posting lists and
   pointers to the second level.
   In this representation, samples are taken every 'samplerate' values 
   (a fixed-parameter).
   - The second level keeps the non-sampled values of each posting list
   encoding d-gaps with a variable-lenght code. In this case using bytecodes. 

How to make
===========
To make the index just give the command "make index", this will
create 'ilspire07.a'.

How to use the index
====================
This framework is based on the pizzachili framework:
	-Just follow the API presented in the site:
		http://pizzachili.dcc.uchile.cl
	-And, include, in your program, interface.h located in
		http://pizzachili.dcc.uchile.cl/utils/

Therefore, to use the representation of the posting lists in
'ilspire07.a' (your index that follows interface "interface.h") the
functions in that interface must be implemented.


How to compile using the index 'ilspire07.a'
============================================
To use this index you must compile your program linking 'ilspire07.a'.
We provide two sample programs 'build_il.c' and 'search_il.c' that can
be linked with 'ilspire07.a' by just typing:

 	- g++ build_il.c -lm -o myIL.exe ilspire07.a
 	- g++ search_il.c -lm -o myILSearch.exe ilspire07.a
	
	* or just by typing "make exes" or "make"

More precisely those two sample programs are the base of this framework,
as they permit to build the compacted representation of a source "set 
of uncompressed posting lists" (with the format shown in 'interface.h')
as well as the operations of "extracting a list" and "intersecting lists"


Creating a compressed representation.
=====================================

The syntax to create a compressed representation is:

    ./myIL <source_postings> <outfile>  [build_opts]

	-  <source_postings> is the uncompressed set of posting lists.
	-  <outfile> is the basename of the file[s] containing the compressed
	   representation. (In this case, a file 'outfile.post' is created)
	-  [build_opts]. Permits to specify additional build options. 

The default 'samplerate' value is 64 (see ildefconfig.h).
As shown, 'samplerate' indicates the interval between two values of
the original sequence that are taken as absolute samples; actually
those in positions post[i*samplerate].
You can change the default samplerate value using the build_option
"samplerate=<number>". Typical <number> values are 8,16,32,64,128...  
	
	./myIL <source> <outfile> "samplerate=16;


Using the compressed representation
===================================
Extraction of the values of posting lists or intersecting 2/n posting lists
can be experimented.

Usage: ./myILSearch <index> <type> <numPatts> <repetitions> [V] [search_opts] < patt_file
  <type>   denotes the type of queries:
       E <numListsToExtract><repetitions>
           Extracts the values of the lists: memory is allocated
       e <numListsToExtract><repetitions>
           Extracts the values of the lists: memory is reserved only once.
       I <numFrases><repetitions>
           Intersection of two lists (diff. opts. depending on [search_opts])
       N <numFrases><repetitions>
           Intersection of n lists (diff. opts. depending on [search_opts])
 
  [V]  with this option it reports on the standard output (extracted values, occurrences, etc).


  * Extract: extracts 9 lists for the first 9 IDs in patterns.file, each
    list is extracted 100000 times and avg times are given. The index used
    is crr.*
       
       $ ./myILSearch crr E 9 100000 < patterns.file
   
  * Intersection of 2 lists.
  	Two different intersection algorithms can be used: ('svs' or 'svsf') & 'merge'.
	If 'svs' is used, four Fsearch (Moffat style in spire'07) functions can
	be used: 'unc', 'dec', 'seq' and 'bin'.
	
	Search_opts can be used two choose among them.
	   $  ./myILSearch crr I 500 2 "int2=merge" < patt_file
	   $  ./myILSearch crr I 500 2 "int2=svs;fsearch=unc" < patt_file
	   $  ./myILSearch crr I 500 2 "int2=svs;fsearch=dec" < patt_file
	   $  ./myILSearch crr I 500 2 "int2=svs;fsearch=seq" < patt_file
	   $  ./myILSearch crr I 500 2 "int2=svs;fsearch=bin" < patt_file
	   $  ./myILSearch crr I 500 2 "int2=svsf;fsearch=unc" < patt_file
	   $  ./myILSearch crr I 500 2 "int2=svsf;fsearch=dec" < patt_file
	   $  ./myILSearch crr I 500 2 "int2=svsf;fsearch=seq" < patt_file
	   $  ./myILSearch crr I 500 2 "int2=svsf;fsearch=bin" < patt_file
	   
  * Intersection of n lists.
    Only svs-type intersection is currently implemented. However, as other
    algorithms will be implemented in a near future, 'search_opts' must
    also be used.
    
    ./myILSearch crr N 500 2 "intn=svs;fsearch=unc" < patt_file
    ./myILSearch crr N 500 2 "intn=svs;fsearch=dec" < patt_file
    ./myILSearch crr N 500 2 "intn=svs;fsearch=seq" < patt_file
    ./myILSearch crr N 500 2 "intn=svs;fsearch=bin" < patt_file


	 
Further notes.
==============

    - Specifying multiple 'build_options' or 'search_options'.
      You can choose among putting all of them either separated or joined
      and separated by ';'. Look at the following examples.
    
     ./myILSearch crr I 500 2 "int2=merge" "fsearch=bin" 
     ./myILSearch crr I 500 2 "int2=merge;fsearch=bin"
     
     
     
     
     