




/** ------------------------------------------------------------------
  * loads the source plain text into memory
  * ------------------------------------------------------------------*/
int loadTextInMem (byte **text, uint *size, char *basename) {
	int file;
	uint sizeFile;
	byte *buffer;

	char *filename;	
	filename = (char *)malloc(sizeof(char)*(strlen(basename)+10));
	strcpy(filename, basename); //strcat(filename, ".");	strcat(filename, SOURCETEXT);

	sizeFile= fileSize(filename);
	buffer = (byte *) malloc (sizeof(byte) * sizeFile);

	fprintf(stderr,"\n\tLoading Source Text into memory from %s", filename);
	if( (file = open(filename, O_RDONLY)) < 0) {
		printf("Cannot open file %s\n", filename);
		exit(0);
	}
	read(file, buffer, sizeFile);
	
	
	//Avoids the non valid chars at the end of the file.
//	int i = sizeFile -1;
//	while ((i>=0)&&(!_Valid[buffer[i]] )) i--;
//	sizeFile = i+1;
	
	//fprintf(stderr,"\n first letter = %c, last letter = %c",buffer[0],buffer[sizeFile -1]);
	
	close(file);			
	*text = buffer;
	*size = sizeFile;
	
	free(filename);
	return 0;
}


/** ------------------------------------------------------------------
  * loads the Repair representation of the text into memory
  * ------------------------------------------------------------------*/
int loadRepair (void *index, char *basename) {
		twcsa *wcsa=(twcsa *) index;	
		char *filename;	
		filename = (char *)malloc(sizeof(char)*(strlen(basename)+10));
		sprintf(filename,"%s.%s", basename, REPAIR_TEXT);
		wcsa->rp= new RepairPost(wcsa->blockSize + wcsa->q-1);
		wcsa->rp->load(filename);
		free(filename);
}


/** ------------------------------------------------------------------
  * saves the Repair representation to disk
  * ------------------------------------------------------------------*/


#ifdef REPAIR_BUILD_EXTERNAL	

	#ifdef REPAIR_FARI_NO_COMPRESS
	int saveRepair (void *index, char *basename) {	
			twcsa *wcsa=(twcsa *) index;	
			char *filename;	
			filename = (char *)malloc(sizeof(char)*(strlen(basename)+10));
			sprintf(filename,"%s.%s", basename, REPAIR_TEXT);
			char command[1000];
			sprintf(command,"cp %s %s ",FILENAME_REPAIR_OUT,filename);
			fprintf(stderr,"\n to copy :: %s\n",command);
			int err= system(command);
			free(filename);
	}
	#endif 

	#ifdef REPAIR_MIGUEL
	int saveRepair (void *index, char *basename) {		
			twcsa *wcsa=(twcsa *) index;	
			char command[1000];
			char *filename, *filenamere, *filenamereout;	
			filename = (char *)malloc(sizeof(char)*(strlen(basename)+10));
			filenamere = (char *)malloc(sizeof(char)*(strlen(basename)+10+RE_FILE_EXTS_MAX_STR_LEN));
			filenamereout = (char *)malloc(sizeof(char)*(strlen(FILENAME_REPAIR_OUT)+10+RE_FILE_EXTS_MAX_STR_LEN));
			
			sprintf(filename,"%s.%s", basename, REPAIR_TEXT);			
			
			{	//MAKES A COPY OF ALL THE FILES CREATED EXTERNALLY (just to rename them).
				int err;
		
				sprintf(filenamere,"%s%s", filename, RE_FILE_EXTS_STR_0);						
				sprintf(filenamereout,"%s%s", FILENAME_REPAIR_OUT, RE_FILE_EXTS_STR_0);						
				sprintf(command,"cp %s %s ",filenamereout,filenamere);
				fprintf(stderr,"\n to copy :: %s\n",command);
				err= system(command);

				sprintf(filenamere,"%s%s", filename, RE_FILE_EXTS_STR_1);
				sprintf(filenamereout,"%s%s", FILENAME_REPAIR_OUT, RE_FILE_EXTS_STR_1);	
				sprintf(command,"cp %s %s ",filenamereout,filenamere);
				fprintf(stderr,"\n to copy :: %s\n",command);
				err= system(command);

				sprintf(filenamere,"%s%s", filename, RE_FILE_EXTS_STR_2);						
				sprintf(filenamereout,"%s%s", FILENAME_REPAIR_OUT, RE_FILE_EXTS_STR_2);						
				sprintf(command,"cp %s %s ",filenamereout,filenamere);
				fprintf(stderr,"\n to copy :: %s\n",command);
				err= system(command);
			}
			free(filename);		
			free(filenamere);
			free(filenamereout);
	}
	#endif

#else 
int saveRepair (void *index, char *basename) {	
		twcsa *wcsa=(twcsa *) index;	
		char *filename;	
		filename = (char *)malloc(sizeof(char)*(strlen(basename)+10));
		sprintf(filename,"%s.%s", basename, REPAIR_TEXT);
		wcsa->rp->save(filename);
		free(filename);
}
#endif
/**------------------------------------------------------------------
Compares two slots (alphanumericaly). For qsort of q-grams
------------------------------------------------------------------ */			   
int qsortCompareAlpha(const void *arg1, const void *arg2) {
	tauxslots *a1 = (tauxslots *) arg1;
	tauxslots *a2 = (tauxslots *) arg2;
	return strcmp((char*)a1->word, (char *)a2->word);	
}

/**------------------------------------------------------------------
 Processes the source sequence:
 Gathers the different q-grams, its frequency and sets also the 
 pointers for the byte *words array (sorted alphanumerically).
 Sets also nwords = number of diff qgrams.
 ----------------------------------------------------------------- */
int CreateVocabularyOfQgrams (void *index){
	twcsa *wcsa=(twcsa *) index;	
	uint q = wcsa->q;
	byte *T = wcsa->text;
	uint n = wcsa->textSize;

	uint nwords;
	byte **words;

	Wt_hash htq;  //Hash of q-grams
	uint maxN= MAX_NUM_OF_DIFFERENT_Q_GRAMS;  // !!!! ENORMOUS !!!

	//if ((SOURCE_ALPHABET_SIZE<=4) && (q <=12))
	//	maxN = 2<< (2*q);  //up to {4^q}-million different qgrams
	htq = wtinitialize_hash(maxN, q); //creates the hash table & zoneMem
	
	fprintf(stderr, "\n maxN = %dm textSize=%d",maxN,n); 
	uint i,pos;
	ulong addrInTH;
	byte *src;
	
	for (i=0; i< n-q+1;i++) {
			src = &T[i];
			if (wtsearch (htq, src, q, &addrInTH )) {
				htq->hash[addrInTH].freq ++;
				//fprintf(stderr,"\n\t\t**** qgram [%s], appears [%d]times",htq->hash[addrInTH].word, htq->hash[addrInTH].freq);
			}
			else {
				char dst[30];
				strncpy(dst,(const char *)src,q);
				dst[q]='\0';
				wtinsertElement (htq, src, q, &addrInTH);
			}
	}

	nwords = htq->NumElem;
	 
	{/**Sorting **/
		//copying to auxiliar structure for sorting
		ulong curr;
		tauxslots *aux = (tauxslots *) malloc (sizeof(tauxslots) * nwords);

		curr = 0;
		for (i=0;i<htq->SIZE_HASH; i++) {
				if (htq->hash[i].word != NULL){
					aux[curr].word = htq->hash[i].word;
					//aux[curr].slot = i;  //not needed
					aux[curr].freq = htq->hash[i].freq;
					curr++;
				}
		}

		//sorting
		qsort(aux, nwords, sizeof(tauxslots), qsortCompareAlpha);	
									
		wcsa->nwords = nwords;
		wcsa->freqs = (uint *)  malloc(sizeof(uint) * wcsa->nwords); 


//		wcsa->wordsZone.size = (wcsa->nwords) * sizeof(byte) * (q);  //array of q-grams.
//		wcsa->wordsZone.zone = (byte *) malloc (wcsa->wordsZone.size);
	
		//setting the pointers in byte **words vector
		//byte *zoneMem;
		//zoneMem = wcsa->wordsZone.zone;
		for(i = 0; i < (wcsa->nwords); i++) {
			//memcpy(zoneMem, (const void *) aux[i].word, (q));
			wcsa->freqs[i] = aux[i].freq;
			//zoneMem += (q);
		}

		/*****************************************/
		{
			byte usedChars[256];
			uint j;
			uint v=0; uint b;
			
			for (i=0;i<256;i++) {  //initialization.
				usedChars[i]=0;
				wcsa->vocq.char2pos[i]=0;
			}
			
			//marks the used chars. Calculates also maxF, and sumfreqs.
			uint sumfreqs=0; uint maxF =0;
			for( i=0;i< (wcsa->nwords);i++) {
				for (j=0;j<(q);j++) {
					usedChars[aux[i].word[j]] =1;
					sumfreqs += aux[i].freq;
					if (maxF < aux[i].freq) maxF = aux[i].freq;
				}
			}
			wcsa->maxNumOccs = maxF;
			//fprintf(stderr,"\n\n maxF 2 = %d",maxF);
						
			//counts the used chars(v), and fill pos2char and char2pos mappings.
			wcsa->vocq.pos2char = (byte *) malloc (256 * sizeof(byte));
			for (i=0;i<256;i++){ 
				if (usedChars[i]) {
					wcsa->vocq.pos2char[v]=i;
					wcsa->vocq.char2pos[i]=v;
				printf("\n used %d (%c) = %d, char2pos[%c]=%d,  pos2char[%d]=%c",i,i,usedChars[i], i,v, v,i);
					v++;
				}
				
			}
			
			b=(byte) bits((uint)v-1);
			printf("\n %d bits will be needed to encode each of %d diff chars",b,v);
			
			//now encodes the q-grams in a (b-bit fashion) into vocq.zone
			wcsa->vocq.size = (wcsa->nwords) * (q) * (b);  //array of q-grams. Size in num of bits.
			wcsa->vocq.zone = (uint *) malloc ((wcsa->vocq.size + W -1)/W  * sizeof(uint));
			wcsa->vocq.zone[(wcsa->vocq.size + W -1)/W -1] = 0000;
			
			pos =0;
			uint val;
			for( i=0;i< (wcsa->nwords);i++) {
				for (j=0;j<(q);j++) {
					val = aux[i].word[j];
					val = wcsa->vocq.char2pos[val];
					//SetField(wcsa->vocq.zone,(uint)b, pos,val);
					bitwrite(wcsa->vocq.zone, pos, (uint)b,val);
					pos +=b;
				}
			}			
		
			wcsa->vocq.b = (byte)b;
			wcsa->vocq.v = v;  //necesario para hacer el malloc
						
		fprintf(stderr,"\n sumfreqs = %d, maxFreq of q-gram = %d",sumfreqs,maxF);
		}
		
		/*****************************************/
		
		free(aux);		
	}
	wtdestroy_hash(htq);
}



/**------------------------------------------------------------------
 Loads the VOCABULARY of SCDC, SS and CC values and sets also the 
 pointers for the byte *words array.
 ----------------------------------------------------------------- */
int loadVocabulary (void *index, char* basename){
	twcsa *wcsa=(twcsa *) index;	
	uint nwords;
	byte *zoneMem;
	char *filename;	
	uint sizeFile;
	int file;
	ulong i;
	filename = (char *)malloc(sizeof(char)*(strlen(basename)+10));
	
	{	
		strcpy(filename, basename);
		strcat(filename, ".");
		strcat(filename, SOURCETEXTVOC);
		sizeFile= fileSize(filename)-sizeof(uint);

		fprintf(stderr,"\n\tLoading vocabulary of qgrams from index %s", filename);

		if( (file = open(filename, O_RDONLY)) < 0) {
			printf("Cannot open file %s\n", filename);
			exit(0);
		}		
		
		//the number of canonical words
		read(file, &nwords, sizeof(uint));
		wcsa->nwords = nwords;
	
		
		//wcsa->words = (byte **) malloc(sizeof(byte *) * (wcsa->nwords +1)); /* FARI 6/8/2009 */

//		wcsa->wordsZone.size = sizeFile;
//		wcsa->wordsZone.zone = (byte *) malloc (sizeof(byte) * sizeFile);
//		read(file,wcsa->wordsZone.zone, (sizeof(byte) * sizeFile));
				
	
		read(file, &(wcsa->vocq.v), sizeof(uint));	        //number of qgrams in the vocab	
		read(file, &(wcsa->vocq.b), sizeof(byte));	        //number of bits (to represent v);
		read(file, wcsa->vocq.char2pos, 256 * sizeof(byte));	//number of words	

		wcsa->vocq.pos2char = (byte *) malloc ((wcsa->vocq.v) * sizeof(byte));
		read(file, wcsa->vocq.pos2char, (wcsa->vocq.v) * sizeof(byte));	//number of words	

		//wcsa->vocq.size = (wcsa->nwords) * (wcsa->q) * (wcsa->vocq.b);  //array of q-grams. Size in num of bits.
		read(file, &(wcsa->vocq.size), sizeof(uint));	        //number of words	
		wcsa->vocq.zone = (uint *) malloc ((wcsa->vocq.size + W -1)/W  * sizeof(uint));
		wcsa->vocq.zone[(wcsa->vocq.size + W -1)/W -1] = 0000;
	
		read(file, wcsa->vocq.zone, ((wcsa->vocq.size + W -1)/W) * sizeof(uint));	//number of words	
				
	}		
	free(filename);

	return (0);
} 


/** ------------------------------------------------------------------
  * Saves the VOCABULARY of SCDC to disk
  * ------------------------------------------------------------------*/
int saveVocabulary (void *index, char* basename) {
	int file;
	char str_s[5];

	char *filename;	
	filename = (char *)malloc(sizeof(char)*(strlen(basename)+10));
	strcpy(filename, basename); strcat(filename, ".");	strcat(filename, SOURCETEXTVOC);
	unlink(filename);
	
	twcsa *wcsa=(twcsa *) index;	
	uint nwords;
	{		
		unlink(filename);
		fprintf(stderr,"\tSaving Vocabulary (list of sorted qgrams) into disk %s\n", filename);		
		if( (file = open(filename, O_WRONLY|O_CREAT,S_IRWXG | S_IRWXU)) < 0) {
			printf("Cannot open file %s\n", filename);
			exit(0);
		}	

		write(file, &(wcsa->nwords), sizeof(uint));	        //number of words	
//		write(file, wcsa->wordsZone.zone, wcsa->wordsZone.size * sizeof(byte));	//the words.
		
		write(file, &(wcsa->vocq.v), sizeof(uint));	        //number of words	
		write(file, &(wcsa->vocq.b), sizeof(byte));	        //number of words	
		write(file, wcsa->vocq.char2pos, 256 * sizeof(byte));	//number of words	
		write(file, wcsa->vocq.pos2char, (wcsa->vocq.v) * sizeof(byte));	//number of words	
		write(file, &(wcsa->vocq.size), sizeof(uint));	        //number of words	
		write(file, wcsa->vocq.zone, ((wcsa->vocq.size + W -1)/W) * sizeof(uint));	//number of words	

		close(file);		
	}	
	
	free(filename);
	return 0;
}





/** **********************************************************************/
/** Some functions used during index construction                        */
/** **********************************************************************/

/** ------------------------------------------------------------------
  * Creates the lists of occurrences of all the words
  * Block-oriented: Only 1 occurrence per block is marked for each word.
  * A word belongs to a block if its associated codeword starts in that block.
  * ------------------------------------------------------------------*/
int createListsOfOccurrences(void *index, uint ***occList, uint **lenList) {
	uint i;	
	twcsa *wcsa=(twcsa *) index;	
	byte *text = wcsa->text;
	uint N = wcsa->textSize - wcsa-> q + 1;;
	uint n = wcsa->nwords;
	uint q= wcsa->q;
	uint offset;
	uint blocksize = wcsa->blockSize;
	
	uint currblock = 0;
	uint posinblock=0;

	fprintf(stderr,"\n Entering 'create list of occurrences'\n.");fflush(stderr);

	//allocating memory.
	uint **occs;
	occs = (uint **) malloc (sizeof(uint *) * n);
	for (i=0;i<n;i++) occs[i]= (uint *) malloc (sizeof(uint) * wcsa->freqs[i]);
	
	//temporal array to keep the last index in the list of the i-th word
	uint *currpos = (uint *) malloc (sizeof(uint)*n);
	//temporal array to keep the block of the last occurrence of the i-th word
	int *lastBlock = (int *) malloc (sizeof(int)*n);
	for (i=0;i<n;i++) {currpos[i]=0; lastBlock[i] = -1;}
		
	//decode && increase freqs
	i=0;

	uint num=0;
	while (i<N) {
		offset =i/blocksize;  //optimizable if a power of 2 is used as block-size
		//i =decodeSC (text, i, &num);
		if ( (num = parseQgramIntoId(wcsa, &text[i], q)) == -1) {
			printf("error during  ii.c::createListsOfOccurrences(), qgram not found"); 
			exit(0);
		}
		i++;
		
		//fprintf(stderr,"\n word %s appeared at position %s",wcsa->words[num],&text[i-1]);
		if (offset != lastBlock[num]) {  //only 1 occurrence per block is marked.
			occs[num][currpos[num]] = offset;  //word "num" occurrs in block "offset"
			currpos[num]++;			
			lastBlock[num] = offset;
		}	
	}		
	free(lastBlock);	

	*occList = occs;	
	*lenList = currpos;
	return 0;
}


/** ------------------------------------------------------------------
  * Prepares the source uint array that should be passed to build_il()
  * Inputs: lenList[], occList[][], nwords and maxPost
  * Output: formatedList[] and formatedLen
  * Format of the created source array.
  * 	// [Nwords=N]
		// [maxPostvalue]
		// [lenPost1][post11][post12]...[post1k]
		// [lenPost2][post21][post22]...[post2k]
		//  ... 
		// [lenPostN][postN1][postN2]...[postNk]
  * ------------------------------------------------------------------*/
int prepareSourceFormatForIListBuilder (uint nwords, uint maxPost, uint *lenList, 
										uint **occList, uint **formatedList, uint *formatedLen){
	uint i,j;
	uint sourcelen=1+1;  //nwords and maxPost
	for (i=0;i<nwords;i++) 	sourcelen += 1 + lenList[i];
	
	uint *source = (uint *) malloc (sourcelen * sizeof(uint));
	if (!source) {
		fprintf(stderr,"\n could not allocate %d bytes... exitting",sourcelen * sizeof(uint)); exit(0);
	}
	
	uint z=0; 
	source[z++]= nwords; 	source[z++]= maxPost;  //z=2;
	for (i=0;i<nwords;i++) {
		source[z++] = lenList[i];
		for (j=0;j<lenList[i];j++) {
			source[z++] = occList[i][j];
		}
	}
	*formatedLen  = sourcelen;
	*formatedList = source;
	return 0;
}





/** **********************************************************************/
/** Saving/Loading the index to/from disk                               **/
/** **********************************************************************/

/** Saving some configuration constants: blockSize, sourceTextSize, maxNumOccs */
int saveIndexConstants(void *index, char *basename) {
	int file;
	char *filename;	
	filename = (char *)malloc(sizeof(char)*(strlen(basename)+10));
	strcpy(filename, basename); strcat(filename, ".");	strcat(filename, CONSTANTS_FILE);
	fprintf(stderr,"\tSaving the configuration constants to file %s\n", filename);
	unlink(filename);
			
	twcsa *wcsa=(twcsa *) index;

	if( (file = open(filename, O_WRONLY|O_CREAT,S_IRWXG | S_IRWXU)) < 0) {
		printf("Cannot open file %s\n", filename);
		exit(0);
	}

	write(file, &wcsa->q, sizeof(uint));
	write(file, &wcsa->blockSize, sizeof(uint));
	write(file, &wcsa->sourceTextSize, sizeof(uint));
	write(file, &wcsa->maxNumOccs, sizeof(uint));
	
	close(file);				
	free(filename);
	return 0;
}

/** Loading some configuration constants: blockSize, sourceTextSize, maxNumOccs */
int loadIndexConstants(void *index, char *basename) {
	int file;
	char *filename;	
	filename = (char *)malloc(sizeof(char)*(strlen(basename)+10));
	strcpy(filename, basename); strcat(filename, ".");	strcat(filename, CONSTANTS_FILE);
	fprintf(stderr,"\t Loading the configuration constants from file %s\n", filename);
		
	twcsa *wcsa=(twcsa *) index;
	
	if( (file = open(filename, O_RDONLY)) < 0) {
		printf("Cannot open file %s\n", filename);
		exit(0);
	}
	read(file, &wcsa->q, sizeof(uint));
	read(file, &wcsa->blockSize, sizeof(uint));
	read(file, &wcsa->sourceTextSize, sizeof(uint));
	read(file, &wcsa->maxNumOccs, sizeof(uint));

	close(file);			
	free(filename);
	return 0;
}



/** Saving freq vector if used. */
int saveFreqVector(uint *V, uint size, char *basename) {
	int file;
	uint sizeFile = size*sizeof(uint);
	uint *buffer = V;

	char *filename;	
	filename = (char *)malloc(sizeof(char)*(strlen(basename)+10));
	strcpy(filename, basename); strcat(filename, ".");	strcat(filename, FREQVECTOR);

	fprintf(stderr,"\tSaving Vector of frequencies %s\n", filename);
	unlink(filename);
	if( (file = open(filename, O_WRONLY|O_CREAT,S_IRWXG | S_IRWXU)) < 0) {
		printf("Cannot open file %s\n", filename);
		exit(0);
	}
	write(file, buffer, sizeFile);
	close(file);				
	free(filename);
	return 0;
}

/** Loading  freq vector if used */
int loadFreqVector(uint **V, uint *size, char *basename) {
	int file;
	uint sizeFile;
	uint *buffer;

	char *filename;	
	filename = (char *)malloc(sizeof(char)*(strlen(basename)+10));
	strcpy(filename, basename); strcat(filename, ".");	strcat(filename, FREQVECTOR);

	sizeFile= fileSize(filename);
	buffer = (uint *) malloc (sizeFile);

	fprintf(stderr,"\tLoading Vector of frequencies %s\n", filename);
	if( (file = open(filename, O_RDONLY)) < 0) {
		printf("Cannot open file %s\n", filename);
		exit(0);
	}
	read(file, buffer, sizeFile);
	close(file);			
	free(filename);

	*V = buffer;
	*size = sizeFile/(sizeof(uint));	
	return 0;
}






/***************************************************************************************/

