
Simple WCSA version without presentation layer, "wcsa" in advance. (both words and separators are indexed).

============================================================================
1. The package.
------------

Assume you extract all in $CURRENT.

You will find the following elements in the package:
	-$CURRENT/Makefile
	-$CURRENT/src
	-$CURRENT/src/intIndex   (implementation of the icsa self-index)
	-$CURRENT/pizza
	-$CURRENT/pizza/Makefile
	-$CURRENT/README

Also:
	-$CURRENT/patts       (some sample patterns).
	-$CURRENT/pattsCR     (some sample patterns over corpus CR).
	-$CURRENT/go*         (some scripts for building the indexes and statistics).
	-$CURRENT/pizza/go*   (some scripts for performing different types of searches).

============================================================================
2. Functions supported:
--------------------
 
  * BUILDING THE INDEX.
	-	int build_index (uchar *text, ulong length, char *build_options, void **index);

  * SEARCHES USING THE INDEX.
  
	-	int count (void *index, uchar *pattern, ulong length, ulong *numocc);
        
	-	int locateWord(void *index, uchar *pattern, ulong length, ulong **occ, ulong *numocc, uint kbefore);

	-	int displayWords (void *index, uchar *pattern, ulong length, ulong numc, 
         ulong *numocc, uchar **snippet_text, ulong **snippet_lengths, uint kbefore);

	-	int displayTextOcurrencesNoShow(void *index, uchar *pattern, ulong length, uint wordsbefore, uint maxnumc);
	
	-	int extractWords (void *index, ulong fromWord, ulong toWord, uchar **text, ulong *text_length);

  ** Note: References to the source text are not kept, therefore operations 
     "locate/display/extract" referring to source text positions (chars) are 
     ##not supported## from the interface ("$CURRENT/pizza/interface.h") given. That is: 

		-	int locate (void *index, uchar *pattern, ulong length, ulong **occ, ulong *numocc);

		-	int display (void *index, uchar *pattern, ulong length, ulong numc, 
								ulong *numocc, uchar **snippet_text, ulong **snippet_lengths);
								
		-	int extract (void *index, ulong from, ulong to, uchar **snippet, ulong *snippet_length);

============================================================================
3. Compiling steps.
----------------
    1. Go to $CURRENT folder
    2. Type "make".
			--> 3 executable files will be created:
		  * BUILDPARSER   --> procceses a text and generates a "text of integer ids (SE)".
                              Builds also the presentacion layer. (Just an array of words sorted
                              alphabetically)
		  * BUILDINTINDEX --> creates a self-index on the "text of integer ids".
		  * STATS         --> shows info (sizes) of the WCSA index: presentation layer +
                              self-index on ints (for SE).

    3. Go to "$CURRENT/pizza" folder
    4. Type "make". --> 2 executable files will be created:
          * BUILDwcsa:  --> permits to build the index (with the diff parameters) in just
          					one step. 
                            **No longer needed**. It needs more memory than using 
							BUILDPARSER first and then BUILDINTINDEX.
          * SEARCHwcsa: --> needed to perform all searches.

============================================================================
4. Running steps.
-----------------
4.1. ** Building an index "simple WCSA" **.

4.1.1. Building an index in two steps in folder $CURRENT (less memory requeriments).
	Follow the next two steps A) and B):

  A) Parsing the original text, building the presentation layer, and generating a 
	sequence of integer ids for the words (SE) that will be self-indexed next.

    * Syntax: 
    	./BUILDPARSER INFILE OUTBASEFILE ["BUILD_OPTIONS"]

    	+ where:
    		-INFILE is a text file.
    		-OUTBASENAME is the basename for all the files used by the index (3 for WCSA).
    		-BUILD_OPTIONS for parser: **No build options** are needed for the simple WCSA

		+ example of use
			./BUILDPARSER cr.txt ./indexes/cr_index

  B) Building a self-index on integers from a file containing a sequence of (uint32) values.
	The input file is a file containing the elements in (SE) from the previous step. In the
	example above, from file "crr_index.se". Several (9 for WCSA) files will be generated 
	for the self-index. They are named based on the name of the input file (but diff extension).

   * Syntax: 
    	./BUILDINTINDEX BASENAME ["BUILD_OPTIONS"]

    	+ where:
    		-BASENAME: The input file will be "BASENAME.se" and all the files used by the index
				will be of the form "BASENAME.*" .

    		-BUILD_OPTIONS for iCSA: Given building parameters (sampling and compression of psi).
    			All those options appear between ""... and will be separated by commas if more
				than one appear.
    			*sA   : Distance between samples of the suffix array (A)
    			*sAinv: Distance of samples of the inverse of A
    			*sPsi : Distance between samples of the psi array
    			*nsHuff: default=16 (x1024 = Number of Huffman symbols used for compression of psi)
    			*psiSF : factor for the searches in the samples of psi (set to 1,2,4,8).

		+ example of use
			./BUILDINTINDEX ./indexes/cr_index "sA=32;sAinv=32;sPsi=32;nsHuff=16;psiSF=4"

  C) Showing statistics (memory usage) of a given index.
   * Syntax: 
    	./STATS BASENAME
		
		+ where:
    		-BASENAME: Such that all the files of the index are named as "BASENAME.*".
 
		+ example of use:
			./STATS cr_index

4.1.2. Building an index in just-1-step (from $CURRENT/pizza directory). This way of building
	the WCSA is the pizza-chile way. Only one program (BUILDwcsa) is needed, but memory
	requirements are much bigger (due to internal fragmentation?) than in the form shown in Section
	4.1.1. To use BUILDwcsa just follow next explanation:

    * Syntax: 
    	./BUILDwcsa INFILE OUTBASEFILE ["BUILD_OPTIONS"]
    			
    	+ where:
    		-INFILE is a text file.
    		-OUTBASENAME is the base name for all the files used by the index (19 for WCSA).
    		-BUILD_OPTIONS: Specify building parameters (presentation layer, sampling, and
				compression of psi). All those options appear between ""... and will be 
				separated by commas if more than one appear.

    			*sZ: Sampling period for structure (Z). (char-offset in the original text)
    			*sB: Sampling period over the compressed representation hold in the 
					presentation layer (CT/TOH array). This is needed for synchronization on
					the compressed CT/TOH array.
    			*stopfile: File containing stopwords. Needed for parsing.

    			*sA: Distance between samples of the suffix array (A)
    			*sAinv: Distance of samples of the inverse of A
    			*sPsi: Distance between samples of the psi array
    			*nsHuff: set to 16 by default (nsHuffx1024 = numOfSymbols)
    			*psiSF : factor for the searches in the samples of psi (set to 1,2,4,8).
    			
    	+ example of use:
    		./BUILDwcsa cr.txt ./indexes/cr_index "sB=32;sZ=512;stopfile=./src/english_stopwords.txt;
										           sA=32;sAinv=32;sPsi=32; nsHuff=16;psiSF=4"

    		    		
4.2. ** Querying the index **

	* Syntax:
		./SEARCHwcsa <index> <type> [wordsbefore][V] < patterns_file

	where: 
	<type>   denotes the type of queries:
		C counting queries;

		L locating queries;                        /** char-based NOT SUPPORTED **/
		D <radix-num-char> displaying queries;     /** char-based NOT SUPPORTED **/
		    <radix-num-char> denotes the number of characters to display
			before and after each pattern occurrence.

		E extracting queries.                      /** char-based NOT SUPPORTED **/

		l <wordsbefore> locating queries (word-oriented);
			<wordsbefore> sets returned location -wordsbefore- word positions
			before each pattern occurrence.

		d <radix-bytes> <wordsbefore>. displaying queries (word-oriented);
		    will extract 2*radix-bytes + lenght(pattern) bytes starting
			extraction -wordsbefore- words before an occurrence.

		s <maxnumc><wordsbefore> displaying queries. Word-oriented display
		   extracts up to 2*wordsbefore words, starting -wordsbefore- positions
		   before each occurrence. The max number of chars extracted is maxnumc;

		e extracting queries. (word-oriented extract).

	[V] with this option it reports on the standard output
	    the results of the queries.
	
	Appends to a text file "timessWCSA.txt" the main statistics of each search.
	

	Examples:
	
	./SEARCHwcsa crr_index C < patts/crNoRep_2_1
		
	./SEARCHwcsa crr_index l 50 1 < crNoRep_2_1
		
	./SEARCHwcsa crr_index d 50 5 V < cr.1Few_1
		
	./SEARCHwcsa crr_index s 10000 10 < crNoRep_2_4
		
	./SEARCHwcsa crr_index e < intervalsWords.txt 
   
============================================================================
Sample patterns.

(1)	Some sample patterns are given in the folder $CURRENT/patts

	*for QUERIES of type:
		C (count), L (locate), D (display), and
	    l (locateWords), d (displaywords), s (displayNoShow).
	
		../patts/crNoRep_2_1 
			--> 2 patters of 1 word.
		../patts/crNoRep_2_4 
			--> 2 patterns with phrases of 4 words.
	
	*for QUERIES OF EXTRACTION OF A PART OF THE TEXT (E)		
	   	../patts/intervalsChars.txt
   			--> 4 intervals of type: from word x to y.
   			
   	*for QUERIES OF EXTRACTION OF A PART OF THE TEXT (e)		
	   	../patts/intervalsWords.txt
   			--> 4 intervals of type: from word x to y.   			

	Some other sample patterns (a larger set) is provided at $CURRENT/pattsCR 	

(2) You can create your own pattern sets using "EXTRACTPHRASES" and "GenIntervalsChars/Words"
	programs. Their syntax follows:
   	
	* For generating random words/phrases use program: EXTRACTPHRASES.
		[tar file] --> extractor.words.noRepeat.noEspaces.tar.gz)
		
		Syntax:  
			./EXTRACTPHRASES  <in file>  <out file> <numberOfPhrases> <phrase Lenght> <1/0 onlywords ?>

		example: 
			./EXTRACTPHRASES /sitio/textos/TODOS.TXT ./todos.xt100k_32 10000 32 0

	  
	* For generating random intervals (for extract operation), two programs are
	  provided (genIntervalsCharWords.tar.gz):
	  	- GenIntervalsChars <inFile> <length> <number> <out intervals file>
	  	- GenIntervalsWords <intsfile> <length> <number> <out intervals file>
	  	
	  	*README.chars & README.words are included in the package.
	  
============================================================================
